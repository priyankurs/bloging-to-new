{"version":3,"sources":["pages/HomePage.js","pages/About.js","pages/articleContent.js","components/ArticleList.js","pages/ArticleListPage.js","pages/NotFoundPage.js","components/CommentList.js","components/UpvoteButton.js","components/AddCommentForm.js","pages/ArticlePage.js","NavBar.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","About","article","name","title","content","ArticleList","articles","map","key","to","substring","ArticleListPage","NotFoundPage","CommentList","comments","comment","user","UpvoteButton","upvote","setArticleInfo","articleName","UpvoteEvent","a","fetch","method","result","json","body","console","log","onClick","AddCommentForm","useState","username","setUsername","textcomment","setTextcomment","CommentUpdate","JSON","stringify","headers","type","value","onChange","event","target","rows","cols","ArticlePage","match","params","ArticleInfo","useEffect","fetchData","find","filter","paragraph","NavBar","App","className","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c72cb6ce.chunk.js","sourcesContent":["import React from \"react\"\n\n\nfunction HomePage(){\nreturn(\n\t<>\n\t\t<h1>My blog </h1>\n\n\n\t\t<p>\n\t\t\tWhenever you attend a conference, consider posting about the major speeches, seminars, etc. Usually, there will be keynote speakers. So write about those people.\n\t\t\tGive summaries of their speeches and highlight the main points or the questions that were left in your mind after they spoke.\n\t\t\tOther people may tweet about the conference, so you can even embed any relevant tweets that you mind find while researching and writing.\n\n\t\t</p>\n\t</>\n)\n}\n\nexport default HomePage","\nimport React from \"react\"\n\n\nfunction About(){\nreturn(\n\t<>\n\t\t<h1>My blog </h1>\n\n\n\t\t<p>\n\t\t\t\tWIll put something here soon\n\t\t</p>\n\t</>\n)\n}\n\nexport default About","const article =[{\n\tname : \"learn-react\",\n\ttitle:\"Fastest way to learn-react\",\n\tcontent: [`\n\n\t\tHave you recently finished a book? Maybe you’ve taken an online course? Write a post about your top 10 takeaways from that resource.\n\nThis is like a review, but will be a lot shorter and probably in a list format. Strive to make your take-aways easily readable and shareable.\n\n\t`]\n\n\t},\n\t{\n\tname : \"learn-node\",\n\ttitle:\"Node server in 10 Sec\",\n\tcontent: [`\n\n\t\tHave you recently finished a book? Maybe you’ve taken an online course? Write a post about your top 10 takeaways from that resource.\n\nThis is like a review, but will be a lot shorter and probably in a list format. Strive to make your take-aways easily readable and shareable.\n\n\t`]\n\n\t}]\n\n\texport default article","import React from \"react\"\nimport { Link } from \"react-router-dom\"\n\n\n\nfunction ArticleList({ articles }){\n\treturn (\n\t\t<>\n\t\t\t<h1>My blog </h1>\n\t\t\t{articles.map((article, key)=> \n\t\t\t<Link  key={key} to={`article/${article.name}`}>\n\t\t\t<h3>{article.title}</h3>\n\t\t\t<p>{article.content[0].substring(0,150)}...</p>\n\t\t\t</Link>)}\n\t\t</>\n\n\n\t\t)\n\n}\n\nexport default ArticleList","import React from \"react\"\nimport article from \"./articleContent\"\nimport ArticleList from \"../components/ArticleList\"\n\n\nfunction ArticleListPage(){\nreturn(\n\t<>\n\t\t<ArticleList articles={article}/>\n\n\t</>\n)\n}\n\nexport default ArticleListPage","import React from \"react\"\n\n\nfunction NotFoundPage(){\n\treturn (\n\n\t\t<h1> Page not exists</h1>\n\n\n\t\t)\n\n\n\n}\n\nexport default NotFoundPage","import React from \"react\"\n\n\n\nfunction CommentList({comments}){\n\n\treturn (\n\t\t<>\n\t\t\t{comments.map((comment, key) =>(\n\t\t\t<div key={key} >\n\t\t\t\t<h3>{comment.user}</h3>\n\t\t\t\t<p>{comment.comment}</p>\n\t\t\t</div>\n\t\t\t))}\n\n\t\t</>\n\t\t)\n}\n\n\nexport default CommentList","import React from \"react\"\n\n\n\nfunction UpvoteButton({upvote, setArticleInfo, articleName}){\n\n\tconst UpvoteEvent = async ()=>{\n\t\t\tconst result = await fetch(`/api/article/${articleName}/upvote`,{\n\t\t\t\tmethod:'post',\n\t\t\t});\n\t\t\tconst body = await result.json();\n\t\t\tconsole.log(body)\n\t\t\tsetArticleInfo(body)\n\t\t}\n\n\n\treturn(\n\t\t<>\n\t\t\t<button onClick={() => UpvoteEvent()}>Add Upvote</button>\n\t\t\t<p>this blog is upvoted {upvote}  times</p>\n\n\n\t\t</>\n\t\t)\n}\n\n\nexport default UpvoteButton","import React, { useState } from 'react'\n\n\n\nfunction AddCommentForm({setArticleInfo, articleName}){\n\n\tconst [username, setUsername] =useState()\n\tconst [textcomment, setTextcomment] = useState()\n\n\nconst CommentUpdate = async ()=>{\n\t\t\tconst result = await fetch(`/api/article/${articleName}/comment`,{\n\t\t\t\tmethod:'post',\n\t\t\t\tbody: JSON.stringify({user: username, comment: textcomment}),\n\t\t\t\theaders: {\n\t\t\t\t\t'content-type':'application/json',\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst body = await result.json();\n\t\t\tsetArticleInfo(body)\n\n\t\t}\n\n\n\n\n\treturn(\n\t\t<>\t\n\t\t\t<label>\n\t\t\tName\n\t\t\t<input type='text' value={username} onChange={(event) => setUsername(event.target.value)}></input>\n\t\t\t</label>\n\t\t\t<label>\n\t\t\t<textarea rows='4' cols='40' value={textcomment} onChange={(event) => setTextcomment(event.target.value) }></textarea>\n\t\t\t</label>\n\t\t\t<button onClick={()=> CommentUpdate()}>Sunmit</button>\n\t\t</>\n\t\t)\n\n\n}\n\n\nexport default AddCommentForm","\nimport React, { useState, useEffect } from \"react\"\nimport content from \"./articleContent\"\nimport NotFoundPage from \"./NotFoundPage\"\nimport CommentList from \"../components/CommentList\"\nimport UpvoteButton from \"../components/UpvoteButton\"\nimport AddCommentForm from \"../components/AddCommentForm\"\n\n\nfunction ArticlePage({ match }){\n\tconst name = match.params.name\n\n\tconst [ArticleInfo, setArticleInfo ] = useState({ upvote:0, comments:[]})\n\n\tuseEffect(()=>{\n\t\tconst fetchData= async ()=>{\n\t\t\tconst result = await fetch(`/api/article/${name}`)\n\t\t\tconst body = await result.json();\n\t\t\tconsole.log(body)\n\t\t\tsetArticleInfo(body)\n\t\t}\n\t\tfetchData()\n\t},[name])\n\n\n\n\tconst article = content.find(article => article.name === name)\n\tif(!article) return <NotFoundPage/>\n\tconst otherArticle = content.filter(articles => articles.name !== name)\n\nreturn(\n\t<>\n\t\t<h1>My blog {article.name} </h1>\n\t\t<UpvoteButton upvote={ArticleInfo.upvote} articleName={name} setArticleInfo={setArticleInfo}/>\n\t\t{article.content.map((paragraph, key)=>( \n\t\t\t<p key={key}> {paragraph}</p> ))}\n\t\t\t<AddCommentForm setArticleInfo={setArticleInfo} articleName={name}/>\n\t\t\t<CommentList comments={ArticleInfo.comments}/>\n\t</>\n\n)\n}\n\nexport default ArticlePage","import React from 'react'\nimport { Link } from \"react-router-dom\"\n\n\nfunction NavBar(){\n\n\treturn(\n\t<nav>\n\t\t<ul>\n\t\t\t<li>\n\t\t\t\t<Link to='/'>Home</Link>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<Link to=\"/about\">About</Link>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<Link to=\"/articlelistpage\">Articles</Link>\n\t\t\t</li>\n\t\t</ul>\n\t</nav>\n\n\t\t)\n\n\n}\n\nexport default NavBar","import React from 'react';\nimport './App.css';\nimport HomePage from './pages/HomePage'\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\"\nimport About from './pages/About'\nimport ArticleListPage from './pages/ArticleListPage'\nimport ArticlePage from './pages/ArticlePage'\nimport NavBar from './NavBar'\nimport NotFoundPage from \"./pages/NotFoundPage\"\n\nfunction App() {\n  return (\n    <Router>\n    <div className=\"App\">\n      <NavBar/>\n      <Switch>\n      <Route exact path=\"/\" component={HomePage}/>\n      <Route path=\"/about\" component={About}/>\n      <Route path=\"/articlelistpage/\" component={ArticleListPage}/>\n      <Route path=\"/article/:name\" component={ArticlePage}/>\n      <Route component={NotFoundPage}/>\n      </Switch>\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}